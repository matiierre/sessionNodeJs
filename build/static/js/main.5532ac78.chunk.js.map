{"version":3,"sources":["stores/userStore.js","components/inputField.js","components/submitButton.js","components/loginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","userName","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5532ac78.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\n\nclass UserStore {\n    constructor() {\n        extendObservable(this, {\n            loading: true,\n            isLoggedIn: false,\n            username: ''\n\n        })\n    }\n}\n\nexport default new UserStore();","import React,{Component} from 'react';\n\nclass InputField extends Component{\n    render(){\n        return(\n            <div className=\"inputField\">\n                <input\n                    className='input'\n                    type= {this.props.type}\n                    placeholder={this.props.placeholder}\n                    value= {this.props.value}\n                    onChange= { (e) => this.props.onChange(e.target.value) } \n                />\n            </div>\n        )\n    }\n}\n\nexport default InputField;","import React,{Component} from 'react';\n\nclass SubmitButton extends Component{\n    render(){\n        return(\n            <div className=\"submitButton\">\n                <button\n                    className='btn'\n                    disabled={this.props.disabled}\n                    onClick={() => this.props.onClick()}\n                >\n                    {this.props.text}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default SubmitButton;","import React,{Component} from 'react';\nimport InputField from './inputField'\nimport SubmitButton from './submitButton';\nimport UserStore from '../stores/userStore';\n\n\nclass LoginForm extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val){\n        val = val.trim();\n\n        if (val.length > 12 ){\n            return;\n        }\n        this.setState({\n            [property]: val\n        })\n    }\n\n    resetForm(){\n        this.setState({\n            username:'',\n            password:'',\n            buttonDisabled: false\n        })\n    }\n\n    async doLogin(){\n        \n        if(!this.state.username){\n            return;\n        }\n        if(!this.state.password){\n            return;\n        }\n        this.setState({\n            buttonDisabled:true\n        })\n\n        try{\n\n            let res = await fetch('/login',{\n                method: 'post',\n                headers:{\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                }),\n\n            });\n\n            let result = await res.json();\n            \n            if(result && result.success){\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            }\n            else if (result && result.success === false){\n                this.resetForm();\n                alert(result.msg);\n            }\n        }catch(e){\n            console.log(e);\n            this.resetForm();\n        }\n    }\n    \n    \n    render(){\n        return(\n            <div className=\"loginForm\">\n                Log In\n                <InputField \n                    type='text'\n                    placeholder = 'Username'\n                    value= {this.state.username? this.state.username: ''}\n                    onChange = { (val) => this.setInputValue('username', val) }\n                /> \n                <InputField \n                    type='password'\n                    placeholder = 'Password'\n                    value= {this.state.username? this.state.password: ''}\n                    onChange = { (val) => this.setInputValue('password', val) }\n                />\n                <SubmitButton \n                    text = 'Log In'\n                    disabled = {this.state.buttonDisabled}\n                    onClick= { () => this.doLogin() }\n                /> \n            </div>\n        )\n    }\n}\n\nexport default LoginForm;","import React, { Component } from 'react';\nimport UserStore from './stores/userStore';\nimport { observer } from 'mobx-react';\nimport InputField from './components/inputField';\nimport LoginForm from './components/loginForm';\nimport SubmitButton from './components/submitButton';\nimport './App.css';\n\nclass App extends Component {\n\n    async componentDidMount(){\n        try{\n            let res = await fetch ('isLoggedIn',{\n                method:'post',\n                headers: {\n                    'Accept': 'aplication/json',\n                    'Content-Type': 'aplication/json'\n                }\n            });\n            let result = await res.json();\n\n            if (result && result.success){\n                UserStore.loading = true;\n                UserStore.isLoggedIn = true;\n                UserStore.userName = result.username;\n            }else{\n                UserStore.loading = false;\n                UserStore.isLoggedIn= false;\n            }\n        }\n        catch(e){\n            UserStore.loading = false;\n            UserStore.isLoggedIn = false;\n        }\n    }\n    \n    async doLogout(){\n        try{\n            let res = await fetch ('logout',{\n                method:'post',\n                headers: {\n                    'Accept': 'aplication/json',\n                    'Content-Type': 'aplication/json'\n                }\n            });\n            let result = await res.json();\n            \n            if (result && result.success){\n                UserStore.isLoggedIn = false;\n                UserStore.userName = '';\n            }\n        }\n        catch(e){\n            console.log(e)\n        }\n    }\n\n    render(){\n        \n        if(UserStore.loading){\n            return(\n                <div className=\"App\">\n                    <div className=\"container\">\n                        Loading, please wait...\n                    </div>\n                </div>\n            );\n        }   \n        else{\n\n            if(UserStore.isLoggedIn){\n                return(\n                <div className=\"App\">\n                    <div className=\"container\">\n                        Welcome {UserStore.userName}\n                        <SubmitButton\n                            text= {'Log out'}\n                            disabled = {false}\n                            onClick= { () => this.doLogout()} \n                        />\n                    </div>\n                </div>\n                )\n               \n            }\n\n            return(\n                <div className=\"App\">\n                    <div className=\"container\">\n                        <LoginForm />\n                    </div>\n                </div>\n            )\n        }\n        \n    }\n}\n\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}